# -*- coding: utf-8 -*-
"""Untitled26.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18QIGjCS5BsA_8J_HdHhyEIUtekjhRZHv
"""

import numpy as np
import matplotlib.pyplot as plt

def trimf(x, params):
    return np.maximum(np.minimum((x - params[0])/(params[1] - params[0]), (params[2] - x)/(params[2] - params[1])), 0.0)

def main():
    x = np.linspace(0, 10, 100)
    poor = trimf(x, [0, 0, 4])
    good = trimf(x, [1, 5, 9])
    excellent = trimf(x, [6, 10, 10])
    plt.figure()
    plt.plot(x, poor, label='Poor')
    plt.plot(x, good, label='Good')
    plt.plot(x, excellent, label='Excellent')
    plt.legend()
    plt.show()

if __name__ == "__main__":
    main()

import numpy as np
import matplotlib.pyplot as plt

def trapmf(x, params):
    return np.maximum(np.minimum(np.minimum((x - params[0])/(params[1] - params[0]), (params[3] - x)/(params[3] - params[2])), 1.0), 0.0)

def main():
    x = np.linspace(0, 10, 100)
    rancid = trapmf(x, [0, 0, 2, 7])
    delecious = trapmf(x, [3, 8, 10, 10])
    plt.figure()
    plt.plot(x, rancid, label='Rancid')
    plt.plot(x, delecious, label='Delecious')
    plt.legend()
    plt.show()

if __name__ == "__main__":
    main()

import numpy as np
import matplotlib.pyplot as plt

def trimf(x, params):
    """Triangular membership function"""
    return np.maximum(np.minimum((x - params[0])/(params[1] - params[0]), (params[2] - x)/(params[2] - params[1])), 0.0)

def main():
    x = np.linspace(0, 30, 100)
    cheap = trimf(x, [0, 5, 10])
    average = trimf(x, [10, 15, 20])
    generous = trimf(x, [20, 25, 30])
    plt.figure()
    plt.plot(x, cheap, label='Cheap')
    plt.plot(x, average, label='Average')
    plt.plot(x, generous, label='Generous')
    plt.legend()
    plt.show()

if __name__ == "__main__":
    main()

#!pip install scikit-fuzzy
import numpy as np
import skfuzzy as fuzz
import matplotlib.pyplot as plt
from skfuzzy import control as ctrl

# Step 1: Define the universe of discourse and fuzzy sets
service = ctrl.Antecedent(np.linspace(0, 10, 100), 'service')
food = ctrl.Antecedent(np.linspace(0, 10, 100), 'food')
tip = ctrl.Consequent(np.linspace(0, 30, 100), 'tip')

# Define fuzzy sets for service
service['poor'] = fuzz.trimf(service.universe, [0, 0, 4])
service['good'] = fuzz.trimf(service.universe, [1, 5, 9])
service['excellent'] = fuzz.trimf(service.universe, [6, 10, 10])

# Define fuzzy sets for food
food['rancid'] = fuzz.trapmf(food.universe, [0, 0, 2, 7])
food['delicious'] = fuzz.trapmf(food.universe, [3, 8, 10, 10])

# Define fuzzy sets for tip
tip['cheap'] = fuzz.trimf(tip.universe, [0, 5, 10])
tip['average'] = fuzz.trimf(tip.universe, [10, 15, 20])
tip['generous'] = fuzz.trimf(tip.universe, [20, 25, 30])

# Step 2: Define fuzzy rules
rule1 = ctrl.Rule(service['poor'] | food['rancid'], tip['cheap'])
rule2 = ctrl.Rule(service['good'], tip['average'])
rule3 = ctrl.Rule(service['excellent'] | food['delicious'], tip['generous'])

# Step 3: Fuzzy Control System Creation and Simulation
tipping_ctrl = ctrl.ControlSystem([rule1, rule2, rule3])
tipping = ctrl.ControlSystemSimulation(tipping_ctrl)

# Step 4: Input values
# Example inputs
tipping.input['service'] = 0.1  # Replace with actual values
tipping.input['food'] = 10     # Replace with actual values

# Compute the result
tipping.compute()
print("Suggested Tip Percentage:", tipping.output['tip'])

# Plot the result
service.view()
food.view()
tip.view()
plt.show()